/*
Создать программу, позволяющую вводить имя и номер человека (людей) в виртуальную телефонную книгу, ёмксотью до 50 записей.
Реализовать также и удаление
*/

#include <iostream>
#include <string>
#include <vector>
#include <clocale>
#include <windows.h>

int main()
{
    setlocale(LC_ALL, "PL_pl.UTF-8");
    SetConsoleCP(CP_UTF8);
    SetConsoleOutputCP(CP_UTF8); //Добавляем поддержку русского языка в консоль
    int n; //Создаём целочисленную переменную n - кол-во абонентов в телефонной книге
    std::cout << "Введите количество абонентов в телефонной книге" << std::endl;
    std::cin >> n;
    std::vector<std::string> book; /*Создаём телефонную книгу размера n, которая сожержит имена абонентов и их номера телефонов в формате строк
                                      По сути, каждый контакт в телефонной книге (т.е book[i]) должен выглядеть так:
                                      Имя
                                      Телефон №1
                                      Телефон №2
                                      ...
                                      Телефон №k
                                      */
    for (int i = 0; i < n;i++) { //Создаём пустую книгу
        book.push_back("");
    }
    std::string line; /*Из-за характера контактов, описанного выше, создаём строку line,
                       в которую будем вводить информацию об абоненте (имя или номер телефона)*/
    int flag = 1; //Создаём переменную, определяющую выбор действия пользователя
    int k; //Создаём переменную, обозначающую индекс+1 обрабатываемого объекта
    while (flag) {
        std::cout << "\nВыберите желаемое действие:\n"
                  << "1 - Заполнить контакт абонента\n"
                  << "2 - Изменить контакт абонента\n"
                  << "3 - Удалить контакт абонента\n"
                  << "0 - Выход\n" << std::endl;
        std::cin >> flag;
        switch (flag) {
        case 1:
            std::cout << "Введите номер контакта, который вы хотите заполнить\n";
            std::cin >> k;
            std::cout << "Введите информацию об абоненте в формате:\n"
                      << "Имя\n"
                      << "Номер телефона\n"
                      << "\nПо окончанию заполнения введите end\n" << std::endl;
            while (std::getline(std::cin, line)) { //Считываем информацию об абоненте из входного потока и записывем её в line
                if (line == "end") { //В случае ввода "end" (т.е. окончания заполенения данных) досрочно выходим из цикла
                    break;
                }
                if (!line.empty()) {
                    book[k-1] += (line + "\n");//С помощью конкатенации строк заполняем контакты в телефонной книге
                }

            }
            break;
        case 2:
            std::cout << "Введите номер контакта, который вы хотите изменить\n";
            std::cin >> k;
            std::cout << "\nВыбран следующий контакт:\n" << std::endl << "Контакт №" << (k - 1) << std::endl << book[k - 1];
            std::cout << "\nВведите обновлённую информацию об абоненте в формате:\n"
                      << "Имя\n"
                      << "Номер телефона\n"
                      << "\nПо окончанию заполнения введите end\n" << std::endl;
            book[k - 1].clear(); //Так как в контакте №k уже хранилась какая-то информация, то сначала очищаем её
            while (std::getline(std::cin, line)) {
                if (line == "end") {
                    break;
                }
                book[k - 1] += line;
                book[k - 1] += "\n";
            }
            break;
        case 3:
            std::cout << "Введите номер контакта, который вы хотите удалить\n";
            std::cin >> k;
            std::cout << "\nВыбран следующий контакт:\n" << std::endl << "Контакт №" << (k - 1) << std::endl << book[k - 1];
            book.erase(book.cbegin() + k - 1); //Удаляем из book элемент с индексом = Итератор нулевого индекса book + номер контакта - 1
            break;
        }
        std::cout << "\nБыла получена следующая телефонная книга:\n" << std::endl;
        for (int i = 0; i < book.size(); i++) {
            std::cout << "Контакт №" << (i + 1) << std::endl << book[i] << std::endl;
        }
    }
}
